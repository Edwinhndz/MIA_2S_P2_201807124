{"ast":null,"code":"const CommandService = {\n  // Función para procesar un comando y enviar al backend\n  parseAndSend: async command => {\n    const parsedCommand = CommandService.parseCommand(command);\n    if (parsedCommand) {\n      const result = await CommandService.sendCommand(parsedCommand);\n\n      // Detectar si el comando es mkdisk y almacenar el path del disco en localStorage\n      if (command.startsWith(\"mkdisk\")) {\n        const disks = JSON.parse(localStorage.getItem(\"disks\")) || [];\n        disks.push(parsedCommand.body.path); // Almacenar solo el path del disco creado\n        localStorage.setItem(\"disks\", JSON.stringify(disks));\n      }\n      return result;\n    } else {\n      throw new Error(\"Comando no válido o no soportado\");\n    }\n  },\n  // Función para parsear el comando (como mkdisk, fdisk, etc.)\n  parseCommand: command => {\n    const params = CommandService.parseParams(command);\n    if (command.startsWith(\"mkdisk\")) {\n      return {\n        url: \"http://localhost:8080/api/mkdisk\",\n        method: \"POST\",\n        body: {\n          size: parseInt(params.size, 10),\n          fit: params.fit.toLowerCase(),\n          unit: params.unit.toLowerCase(),\n          path: params.path\n        }\n      };\n    } else if (command.startsWith(\"fdisk\")) {\n      if (params.delete) {\n        return {\n          url: \"http://localhost:8080/api/fdisk\",\n          method: \"POST\",\n          body: {\n            delete: params.delete.toLowerCase(),\n            // Fast o Full\n            path: params.path,\n            name: params.name.toLowerCase()\n          }\n        };\n      } else if (params.add) {\n        return {\n          url: \"http://localhost:8080/api/fdisk\",\n          method: \"POST\",\n          body: {\n            add: parseInt(params.add, 10),\n            unit: params.unit.toLowerCase(),\n            path: params.path,\n            name: params.name.toLowerCase()\n          }\n        };\n      } else {\n        return {\n          url: \"http://localhost:8080/api/fdisk\",\n          method: \"POST\",\n          body: {\n            size: parseInt(params.size, 10),\n            path: params.path,\n            name: params.name.toLowerCase(),\n            unit: params.unit.toLowerCase(),\n            type: params.type.toLowerCase(),\n            fit: params.fit ? params.fit.toLowerCase() : \"w\"\n          }\n        };\n      }\n    } else if (command.startsWith(\"mount\")) {\n      return {\n        url: \"http://localhost:8080/api/mount\",\n        method: \"POST\",\n        body: {\n          path: params.path,\n          name: params.name.toLowerCase()\n        }\n      };\n    } else if (command.startsWith(\"mkfs\")) {\n      return {\n        url: \"http://localhost:8080/api/mkfs\",\n        method: \"POST\",\n        body: {\n          id: params.id,\n          type: params.type.toLowerCase(),\n          fs: params.fs ? params.fs.toLowerCase() : \"2fs\"\n        }\n      };\n    } else if (command.startsWith(\"login\")) {\n      return {\n        url: \"http://localhost:8080/api/login\",\n        method: \"POST\",\n        body: {\n          user: params.user,\n          pass: params.pass,\n          id: params.id\n        }\n      };\n    } else if (command.startsWith(\"readmbr\")) {\n      return {\n        url: \"http://localhost:8080/api/readmbr\",\n        method: \"POST\",\n        body: {\n          path: params.path\n        }\n      };\n    } else if (command.startsWith(\"rep\")) {\n      return {\n        url: \"http://localhost:8080/api/rep\",\n        method: \"POST\",\n        body: {\n          name: params.name,\n          path: params.path,\n          id: params.id,\n          path_file_ls: params.path_file_ls || \"\"\n        }\n      };\n    }\n    return null;\n  },\n  // Función para extraer parámetros de los comandos\n  parseParams: command => {\n    const regex = /-(\\w+)=(\"[^\"]*\"|\\S+)/g;\n    let match;\n    const params = {};\n    while ((match = regex.exec(command)) !== null) {\n      const key = match[1];\n      // Eliminar comillas alrededor de los valores\n      const value = match[2].replace(/\"/g, \"\");\n      params[key] = value;\n    }\n    return params;\n  },\n  // Función para enviar los comandos al backend con mejor manejo de errores\n  sendCommand: async parsedCommand => {\n    try {\n      const response = await fetch(parsedCommand.url, {\n        method: parsedCommand.method,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(parsedCommand.body)\n      });\n\n      // Si el estado no es ok, arroja un error con el contenido de la respuesta\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Error en el servidor: ${response.statusText}`);\n      }\n\n      // Devolver la respuesta en JSON si todo está bien\n      return await response.json();\n    } catch (error) {\n      // Capturar cualquier error durante la solicitud\n      throw new Error(error.message || \"Error al enviar el comando\");\n    }\n  }\n};\nexport default CommandService;","map":{"version":3,"names":["CommandService","parseAndSend","command","parsedCommand","parseCommand","result","sendCommand","startsWith","disks","JSON","parse","localStorage","getItem","push","body","path","setItem","stringify","Error","params","parseParams","url","method","size","parseInt","fit","toLowerCase","unit","delete","name","add","type","id","fs","user","pass","path_file_ls","regex","match","exec","key","value","replace","response","fetch","headers","ok","errorData","json","error","statusText","message"],"sources":["/home/antares/Desktop/Archivos/MIA_2S_P2_201807124/Proyecto 2/frontend/src/services/CommandService.js"],"sourcesContent":["const CommandService = {\n  // Función para procesar un comando y enviar al backend\n  parseAndSend: async (command) => {\n    const parsedCommand = CommandService.parseCommand(command);\n    if (parsedCommand) {\n      const result = await CommandService.sendCommand(parsedCommand);\n      \n      // Detectar si el comando es mkdisk y almacenar el path del disco en localStorage\n      if (command.startsWith(\"mkdisk\")) {\n        const disks = JSON.parse(localStorage.getItem(\"disks\")) || [];\n        disks.push(parsedCommand.body.path);  // Almacenar solo el path del disco creado\n        localStorage.setItem(\"disks\", JSON.stringify(disks));\n      }\n\n      return result;\n    } else {\n      throw new Error(\"Comando no válido o no soportado\");\n    }\n  },\n\n  // Función para parsear el comando (como mkdisk, fdisk, etc.)\n  parseCommand: (command) => {\n    const params = CommandService.parseParams(command);\n\n    if (command.startsWith(\"mkdisk\")) {\n      return {\n        url: \"http://localhost:8080/api/mkdisk\",\n        method: \"POST\",\n        body: {\n          size: parseInt(params.size, 10),\n          fit: params.fit.toLowerCase(),\n          unit: params.unit.toLowerCase(),\n          path: params.path\n        }\n      };\n    } else if (command.startsWith(\"fdisk\")) {\n      if (params.delete) {\n        return {\n          url: \"http://localhost:8080/api/fdisk\",\n          method: \"POST\",\n          body: {\n            delete: params.delete.toLowerCase(),  // Fast o Full\n            path: params.path,\n            name: params.name.toLowerCase()\n          }\n        };\n      } else if (params.add) {\n        return {\n          url: \"http://localhost:8080/api/fdisk\",\n          method: \"POST\",\n          body: {\n            add: parseInt(params.add, 10),\n            unit: params.unit.toLowerCase(),\n            path: params.path,\n            name: params.name.toLowerCase()\n          }\n        };\n      } else {\n        return {\n          url: \"http://localhost:8080/api/fdisk\",\n          method: \"POST\",\n          body: {\n            size: parseInt(params.size, 10),\n            path: params.path,\n            name: params.name.toLowerCase(),\n            unit: params.unit.toLowerCase(),\n            type: params.type.toLowerCase(),\n            fit: params.fit ? params.fit.toLowerCase() : \"w\"\n          }\n        };\n      }\n    } else if (command.startsWith(\"mount\")) {\n      return {\n        url: \"http://localhost:8080/api/mount\",\n        method: \"POST\",\n        body: {\n          path: params.path,\n          name: params.name.toLowerCase()\n        }\n      };\n    } else if (command.startsWith(\"mkfs\")) {\n      return {\n        url: \"http://localhost:8080/api/mkfs\",\n        method: \"POST\",\n        body: {\n          id: params.id,\n          type: params.type.toLowerCase(),\n          fs: params.fs ? params.fs.toLowerCase() : \"2fs\"\n        }\n      };\n    } else if (command.startsWith(\"login\")) {\n      return {\n        url: \"http://localhost:8080/api/login\",\n        method: \"POST\",\n        body: {\n          user: params.user,\n          pass: params.pass,\n          id: params.id\n        }\n      };\n    } else if (command.startsWith(\"readmbr\")) {\n      return {\n        url: \"http://localhost:8080/api/readmbr\",\n        method: \"POST\",\n        body: {\n          path: params.path  \n        }\n      };\n  }else if (command.startsWith(\"rep\")) {\n      return {\n        url: \"http://localhost:8080/api/rep\",\n        method: \"POST\",\n        body: {\n          name: params.name,\n          path: params.path,\n          id: params.id,\n          path_file_ls: params.path_file_ls || \"\"\n        }\n      };\n    }\n    return null;\n  },\n\n  // Función para extraer parámetros de los comandos\n  parseParams: (command) => {\n    const regex = /-(\\w+)=(\"[^\"]*\"|\\S+)/g;\n    let match;\n    const params = {};\n    while ((match = regex.exec(command)) !== null) {\n      const key = match[1];\n      // Eliminar comillas alrededor de los valores\n      const value = match[2].replace(/\"/g, \"\"); \n      params[key] = value;\n    }\n    return params;\n  },\n\n  // Función para enviar los comandos al backend con mejor manejo de errores\n  sendCommand: async (parsedCommand) => {\n    try {\n      const response = await fetch(parsedCommand.url, {\n        method: parsedCommand.method,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(parsedCommand.body)\n      });\n\n      // Si el estado no es ok, arroja un error con el contenido de la respuesta\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Error en el servidor: ${response.statusText}`);\n      }\n\n      // Devolver la respuesta en JSON si todo está bien\n      return await response.json();\n    } catch (error) {\n      // Capturar cualquier error durante la solicitud\n      throw new Error(error.message || \"Error al enviar el comando\");\n    }\n  }\n};\n\nexport default CommandService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}